// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recruiting_Company_Web_API.Contexts;

#nullable disable

namespace Recruiting_Company_Web_API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240421203915_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.CV", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<byte[]>("File")
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileFormat")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Link")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeekerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SeekerID");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Category", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Освіта"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Наука"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Медицина"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "Будівництво"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Важка промисловість"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "Легка промисловість"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Авто"
                        },
                        new
                        {
                            Id = (short)9,
                            Name = "Фінанси"
                        },
                        new
                        {
                            Id = (short)10,
                            Name = "Торгівля"
                        },
                        new
                        {
                            Id = (short)11,
                            Name = "Охорона"
                        },
                        new
                        {
                            Id = (short)12,
                            Name = "Менеджмент"
                        },
                        new
                        {
                            Id = (short)13,
                            Name = "Бізнес"
                        },
                        new
                        {
                            Id = (short)14,
                            Name = "Краса"
                        },
                        new
                        {
                            Id = (short)15,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = (short)16,
                            Name = "Маркетинг"
                        },
                        new
                        {
                            Id = (short)17,
                            Name = "Нерухомість"
                        },
                        new
                        {
                            Id = (short)18,
                            Name = "Культура"
                        },
                        new
                        {
                            Id = (short)19,
                            Name = "Сервіс"
                        },
                        new
                        {
                            Id = (short)20,
                            Name = "Зоо"
                        },
                        new
                        {
                            Id = (short)21,
                            Name = "Юриспруденція"
                        },
                        new
                        {
                            Id = (short)22,
                            Name = "Вантаж"
                        },
                        new
                        {
                            Id = (short)23,
                            Name = "Робота за кордоном"
                        },
                        new
                        {
                            Id = (short)24,
                            Name = "Технічне обслуговування"
                        },
                        new
                        {
                            Id = (short)25,
                            Name = "Адміністрація"
                        });
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Response", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal?>("CVID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("VacancyID")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CVID");

                    b.HasIndex("VacancyID");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.SeekerTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SeekerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("VacancyID")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("VacancyID");

                    b.HasIndex("SeekerID", "VacancyID")
                        .IsUnique()
                        .HasFilter("[SeekerID] IS NOT NULL AND [VacancyID] IS NOT NULL");

                    b.ToTable("SeekersTabs");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Vacancy", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<short?>("CategoryID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("EmployerID");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Employer", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Seeker", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<short>("Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Seeker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.CV", b =>
                {
                    b.HasOne("Recruiting_Company_Web_API.Entities.Seeker", "Seeker")
                        .WithMany("CVs")
                        .HasForeignKey("SeekerID");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Response", b =>
                {
                    b.HasOne("Recruiting_Company_Web_API.Entities.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Recruiting_Company_Web_API.Entities.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CV");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.SeekerTab", b =>
                {
                    b.HasOne("Recruiting_Company_Web_API.Entities.Seeker", "Seeker")
                        .WithMany()
                        .HasForeignKey("SeekerID");

                    b.HasOne("Recruiting_Company_Web_API.Entities.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Seeker");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Vacancy", b =>
                {
                    b.HasOne("Recruiting_Company_Web_API.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("Recruiting_Company_Web_API.Entities.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerID");

                    b.Navigation("Category");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Employer", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Recruiting_Company_Web_API.Entities.Seeker", b =>
                {
                    b.Navigation("CVs");
                });
#pragma warning restore 612, 618
        }
    }
}
